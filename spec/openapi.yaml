openapi: 3.0.3
info:
  title: MBapp API
  version: '2025-09-25'
  description: Single-source-of-truth API for MBapp objects, views, workspaces, and tools.
  license:
    url: https://license.mbapp.dev
    name: MIT
servers:
  - url: https://api.mbapp.dev
security:
  - bearerAuth: []
tags:
  - name: Objects
    description: Generic object CRUD, list, search, and actions by type.
  - name: Auth
    description: Authentication and policy.
  - name: Views
    description: Saved per-module user views (filters/sorts/columns).
  - name: Workspaces
    description: Role-aware cross-module compositions (tiles).
  - name: Tools
    description: Dev/ops helpers for non-prod use.
  - name: Admin
    description: Administrative and audit endpoints.
paths:
  /objects/{type}:
    get:
      tags:
        - Objects
      operationId: listObjects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
        - $ref: '#/components/parameters/Q'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Next'
        - $ref: '#/components/parameters/Fields'
      responses:
        '200':
          $ref: '#/components/responses/ListPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Get Objects by Type
    post:
      tags:
        - Objects
      operationId: createObject
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Post Objects
  /objects/{type}/list:
    get:
      tags:
        - Objects
      operationId: listObjectsExplicit
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
        - $ref: '#/components/parameters/Q'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Next'
        - $ref: '#/components/parameters/Fields'
      responses:
        '200':
          $ref: '#/components/responses/ListPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Get Objects List
  /objects/{type}/search:
    get:
      tags:
        - Objects
      operationId: searchObjects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
        - $ref: '#/components/parameters/Q'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Next'
        - $ref: '#/components/parameters/Fields'
      responses:
        '200':
          $ref: '#/components/responses/ListPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Search Objects by Type
  /objects/{type}/{id}:
    get:
      tags:
        - Objects
      operationId: getObject
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
        - $ref: '#/components/parameters/IdPath'
        - $ref: '#/components/parameters/Fields'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Get Objects by Type and ID
    put:
      tags:
        - Objects
      operationId: replaceObject
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          description: Updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update Objects
    delete:
      tags:
        - Objects
      operationId: deleteObject
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/TypePath'
        - $ref: '#/components/parameters/IdPath'
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete Objects
  /auth/policy:
    get:
      tags:
        - Auth
      operationId: getPolicy
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Get AUTH
  /views:
    get:
      tags:
        - Views
      operationId: listViews
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: moduleKey
          in: query
          schema:
            type: string
        - name: ownerId
          in: query
          schema:
            type: string
        - name: shared
          in: query
          schema:
            type: boolean
        - name: isDefault
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Next'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewList'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: List Views (role-aware)
    post:
      tags:
        - Views
      operationId: createView
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/View'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Create a View
  /views/{id}:
    get:
      tags:
        - Views
      operationId: getView
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Get a View
    put:
      tags:
        - Views
      operationId: replaceView
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/View'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Replace a View
    patch:
      tags:
        - Views
      operationId: updateView
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              $ref: '#/components/schemas/View'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update a View (partial)
    delete:
      tags:
        - Views
      operationId: deleteView
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a View
  /workspaces:
    get:
      tags:
        - Workspaces
      operationId: listWorkspaces
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: ownerId
          in: query
          schema:
            type: string
        - name: shared
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Next'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceList'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: List Workspaces (role-aware)
    post:
      tags:
        - Workspaces
      operationId: createWorkspace
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Create a Workspace
  /workspaces/{id}:
    get:
      tags:
        - Workspaces
      operationId: getWorkspace
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Get a Workspace
    put:
      tags:
        - Workspaces
      operationId: replaceWorkspace
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Replace a Workspace
    patch:
      tags:
        - Workspaces
      operationId: updateWorkspace
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update a Workspace (partial)
    delete:
      tags:
        - Workspaces
      operationId: deleteWorkspace
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a Workspace
  /admin/audit:
    get:
      tags:
        - Admin
      operationId: listAudit
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: since
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Admin Audit
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    TenantHeader:
      name: x-tenant-id
      in: header
      required: true
      schema:
        type: string
    TypePath:
      name: type
      in: path
      required: true
      schema:
        type: string
    IdPath:
      name: id
      in: path
      required: true
      schema:
        type: string
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 50
    Next:
      name: next
      in: query
      schema:
        type: string
    Q:
      name: q
      in: query
      schema:
        type: string
    Fields:
      name: fields
      in: query
      schema:
        type: string
        description: Comma-separated field projection
  responses:
    ListPage:
      description: Paged list of objects
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/AnyObject'
              next:
                type: string
                nullable: true
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
    NotFound:
      description: Not found
  schemas:
    ObjectBase:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
        type:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
      required:
        - id
        - tenantId
        - createdAt
        - updatedAt
    AnyObject:
      type: object
      additionalProperties: true
    View:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - view
            moduleKey:
              type: string
              description: e.g., products, inventory, events
            name:
              type: string
            queryJSON:
              type: object
              additionalProperties: true
            ownerId:
              type: string
              nullable: true
            shared:
              type: boolean
            isDefault:
              type: boolean
          required:
            - type
            - moduleKey
            - name
            - queryJSON
    ViewList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/View'
        next:
          type: string
          nullable: true
    WorkspaceTile:
      type: object
      properties:
        moduleKey:
          type: string
        viewId:
          type: string
          nullable: true
        inlineQuery:
          type: object
          additionalProperties: true
          nullable: true
        layout:
          type: object
          additionalProperties: true
      required:
        - moduleKey
    Workspace:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - workspace
            name:
              type: string
            tiles:
              type: array
              items:
                $ref: '#/components/schemas/WorkspaceTile'
            ownerId:
              type: string
              nullable: true
            shared:
              type: boolean
          required:
            - type
            - name
            - tiles
    WorkspaceList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
        next:
          type: string
          nullable: true
    Policy:
      type: object
      properties:
        tenantId:
          type: string
        userId:
          type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        ui:
          type: object
          properties:
            allowedModuleKeys:
              type: array
              items:
                type: string
            allowedViews:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  moduleKey:
                    type: string
            allowedWorkspaces:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
      required:
        - permissions
        - roles
    Client:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - client
            name:
              type: string
            displayName:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
              format: email
            phone:
              type: string
            status:
              type: string
              enum:
                - active
                - inactive
                - archived
              default: active
            notes:
              type: string
          required:
            - type
            - name
    Account:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - account
            name:
              type: string
            number:
              type: string
            currency:
              type: string
            accountType:
              type: string
              description: e.g., asset, liability, revenue
            balance:
              type: number
              description: Current balance (display only)
            status:
              type: string
              enum:
                - active
                - inactive
                - archived
              default: active
          required:
            - type
            - name
    Product:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          required:
            - name
            - type
          properties:
            type:
              type: string
              enum:
                - product
            name:
              type: string
            kind:
              type: string
              enum:
                - good
                - service
            sku:
              type: string
            price:
              type: number
            taxCode:
              type: string
            status:
              type: string
              enum:
                - active
                - inactive
                - archived
              default: active
            notes:
              type: string
    InventoryItem:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          required:
            - type
            - name
          properties:
            type:
              type: string
              enum:
                - inventory
            productId:
              type: string
              description: Optional link to a product
            name:
              type: string
            sku:
              type: string
            quantity:
              type: number
            uom:
              type: string
              description: Unit of measure
            location:
              type: string
            minQty:
              type: number
            maxQty:
              type: number
            status:
              type: string
              enum:
                - active
                - inactive
                - archived
              default: active
            notes:
              type: string
    Resource:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          required:
            - name
            - type
          properties:
            type:
              type: string
              enum:
                - resource
            name:
              type: string
            code:
              type: string
            url:
              type: string
              format: uri
            expiresAt:
              type: string
              format: date-time
    Event:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - event
            name:
              type: string
            description:
              type: string
            location:
              type: string
            startsAt:
              type: string
              format: date-time
            endsAt:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - available
                - unavailable
                - maintenance
              default: available
            capacity:
              type: number
            notes:
              type: string
          required:
            - type
            - name
            - startsAt
    Registration:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          required:
            - eventId
          properties:
            type:
              type: string
              enum:
                - registration
            eventId:
              type: string
            clientId:
              type: string
            startsAt:
              type: string
              format: date-time
            endsAt:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - pending
                - confirmed
                - cancelled
                - checked_in
                - completed
              default: pending
            registeredAt:
              type: string
              format: date-time
            notes:
              type: string
    Reservation:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          required:
            - resourceId
          properties:
            type:
              type: string
              enum:
                - reservation
            resourceId:
              type: string
            start:
              type: string
              format: date-time
              description: Alias of startsAt
            end:
              type: string
              format: date-time
              description: Alias of endsAt
            startsAt:
              type: string
              format: date-time
            endsAt:
              type: string
              format: date-time
            clientId:
              type: string
            status:
              type: string
              enum:
                - pending
                - confirmed
                - cancelled
                - checked_in
                - completed
              default: pending
            notes:
              type: string
    Vendor:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          required:
            - name
          properties:
            type:
              type: string
              enum:
                - vendor
            name:
              type: string
            displayName:
              type: string
            email:
              type: string
              format: email
            phone:
              type: string
            notes:
              type: string
            status:
              type: string
              enum:
                - active
                - inactive
                - archived
              default: active
    Employee:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - employee
            displayName:
              type: string
            email:
              type: string
              format: email
            phone:
              type: string
            role:
              type: string
            status:
              type: string
              enum:
                - active
                - inactive
                - terminated
              default: active
            hiredAt:
              type: string
              format: date-time
            startDate:
              type: string
              format: date-time
              description: Alias of hiredAt for UI consistency
            terminatedAt:
              type: string
              format: date-time
            notes:
              type: string
          required:
            - type
            - displayName
    PurchaseOrderLine:
      type: object
      properties:
        productId:
          type: string
        sku:
          type: string
        qty:
          type: number
        uom:
          type: string
          example: each
        unitPrice:
          type: number
        receivedQty:
          type: number
          default: 0
      required:
        - productId
        - qty
        - unitPrice
    PurchaseOrder:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - purchaseOrder
            vendorId:
              type: string
            status:
              type: string
              enum:
                - draft
                - submitted
                - approved
                - partially_received
                - received
                - canceled
            currency:
              type: string
              example: USD
            lines:
              type: array
              items:
                $ref: '#/components/schemas/PurchaseOrderLine'
            totals:
              type: object
              properties:
                subtotal:
                  type: number
                tax:
                  type: number
                shipping:
                  type: number
                total:
                  type: number
          required:
            - type
            - vendorId
            - status
    Receipt:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - receipt
            purchaseOrderId:
              type: string
            lines:
              type: array
              items:
                type: object
                properties:
                  productId:
                    type: string
                  qty:
                    type: number
                  locationId:
                    type: string
            note:
              type: string
          required:
            - type
            - purchaseOrderId
            - lines
    SalesOrderLine:
      type: object
      properties:
        productId:
          type: string
        sku:
          type: string
        qty:
          type: number
        uom:
          type: string
          example: each
        unitPrice:
          type: number
        allocatedQty:
          type: number
          default: 0
        fulfilledQty:
          type: number
          default: 0
      required:
        - productId
        - qty
        - unitPrice
    SalesOrder:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - salesOrder
            clientId:
              type: string
            status:
              type: string
              enum:
                - draft
                - reserved
                - partially_fulfilled
                - fulfilled
                - canceled
            currency:
              type: string
              example: USD
            lines:
              type: array
              items:
                $ref: '#/components/schemas/SalesOrderLine'
            totals:
              type: object
              properties:
                subtotal:
                  type: number
                tax:
                  type: number
                shipping:
                  type: number
                total:
                  type: number
          required:
            - type
            - clientId
            - status
    Fulfillment:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - fulfillment
            salesOrderId:
              type: string
            lines:
              type: array
              items:
                type: object
                properties:
                  productId:
                    type: string
                  qty:
                    type: number
                  fromLocationId:
                    type: string
            carrier:
              type: string
            tracking:
              type: string
          required:
            - type
            - salesOrderId
            - lines
    Integration:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - integration
            provider:
              type: string
              enum:
                - shopify
                - quickbooks
                - rfid
                - webhook
                - streaming
            status:
              type: string
              enum:
                - disabled
                - enabled
            config:
              type: object
              additionalProperties: true
          required:
            - type
            - provider
            - status
    IntegrationRun:
      allOf:
        - $ref: '#/components/schemas/ObjectBase'
        - type: object
          properties:
            type:
              type: string
              enum:
                - integrationRun
            integrationId:
              type: string
            startedAt:
              type: string
              format: date-time
            finishedAt:
              type: string
              format: date-time
              nullable: true
            status:
              type: string
              enum:
                - queued
                - running
                - success
                - error
            stats:
              type: object
              additionalProperties: true
            error:
              type: string
              nullable: true
          required:
            - type
            - integrationId
            - startedAt
            - status
