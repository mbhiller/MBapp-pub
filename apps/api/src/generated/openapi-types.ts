/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/objects/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Objects by Type */
        get: operations["listObjects"];
        put?: never;
        /** Post Objects */
        post: operations["createObject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Objects List */
        get: operations["listObjectsExplicit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Objects by Type */
        get: operations["searchObjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Objects by Type and ID */
        get: operations["getObject"];
        /** Update Objects */
        put: operations["replaceObject"];
        post?: never;
        /** Delete Objects */
        delete: operations["deleteObject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get AUTH */
        get: operations["getPolicy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Views (role-aware) */
        get: operations["listViews"];
        put?: never;
        /** Create a View */
        post: operations["createView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/views/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a View */
        get: operations["getView"];
        /** Replace a View */
        put: operations["replaceView"];
        post?: never;
        /** Delete a View */
        delete: operations["deleteView"];
        options?: never;
        head?: never;
        /** Update a View (partial) */
        patch: operations["updateView"];
        trace?: never;
    };
    "/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Workspaces (role-aware) */
        get: operations["listWorkspaces"];
        put?: never;
        /** Create a Workspace */
        post: operations["createWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a Workspace */
        get: operations["getWorkspace"];
        /** Replace a Workspace */
        put: operations["replaceWorkspace"];
        post?: never;
        /** Delete a Workspace */
        delete: operations["deleteWorkspace"];
        options?: never;
        head?: never;
        /** Update a Workspace (partial) */
        patch: operations["updateWorkspace"];
        trace?: never;
    };
    "/admin/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Audit */
        get: operations["listAudit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ObjectBase: {
            id: string;
            tenantId: string;
            type?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
        AnyObject: {
            [key: string]: unknown;
        };
        View: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "view";
            /** @description e.g., products, inventory, events */
            moduleKey: string;
            name: string;
            queryJSON: {
                [key: string]: unknown;
            };
            ownerId?: string | null;
            shared?: boolean;
            isDefault?: boolean;
        };
        ViewList: {
            items?: components["schemas"]["View"][];
            next?: string | null;
        };
        WorkspaceTile: {
            moduleKey: string;
            viewId?: string | null;
            inlineQuery?: {
                [key: string]: unknown;
            } | null;
            layout?: {
                [key: string]: unknown;
            };
        };
        Workspace: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "workspace";
            name: string;
            tiles: components["schemas"]["WorkspaceTile"][];
            ownerId?: string | null;
            shared?: boolean;
        };
        WorkspaceList: {
            items?: components["schemas"]["Workspace"][];
            next?: string | null;
        };
        Policy: {
            tenantId?: string;
            userId?: string;
            roles: string[];
            permissions: string[];
            ui?: {
                allowedModuleKeys?: string[];
                allowedViews?: {
                    id?: string;
                    moduleKey?: string;
                }[];
                allowedWorkspaces?: {
                    id?: string;
                    name?: string;
                }[];
            };
        };
        Client: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "client";
            name: string;
            displayName?: string;
            firstName?: string;
            lastName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        Account: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "account";
            name: string;
            number?: string;
            currency?: string;
            /** @description e.g., asset, liability, revenue */
            accountType?: string;
            /** @description Current balance (display only) */
            balance?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Product: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "product";
            name: string;
            /** @enum {string} */
            kind?: "good" | "service";
            sku?: string;
            price?: number;
            taxCode?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        InventoryItem: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "inventory";
            /** @description Optional link to a product */
            productId?: string;
            name: string;
            sku?: string;
            quantity?: number;
            /** @description Unit of measure */
            uom?: string;
            location?: string;
            minQty?: number;
            maxQty?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        Resource: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "resource";
            name: string;
            code?: string;
            /** Format: uri */
            url?: string;
            /** Format: date-time */
            expiresAt?: string;
        };
        Event: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "event";
            name: string;
            description?: string;
            location?: string;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * @default available
             * @enum {string}
             */
            status: "available" | "unavailable" | "maintenance";
            capacity?: number;
            notes?: string;
        };
        Registration: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type?: "registration";
            eventId: string;
            clientId?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "cancelled" | "checked_in" | "completed";
            /** Format: date-time */
            registeredAt?: string;
            notes?: string;
        };
        Reservation: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type?: "reservation";
            resourceId: string;
            /**
             * Format: date-time
             * @description Alias of startsAt
             */
            start?: string;
            /**
             * Format: date-time
             * @description Alias of endsAt
             */
            end?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            clientId?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "cancelled" | "checked_in" | "completed";
            notes?: string;
        };
        Vendor: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type?: "vendor";
            name: string;
            displayName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            notes?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Employee: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "employee";
            displayName: string;
            /** Format: email */
            email?: string;
            phone?: string;
            role?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "terminated";
            /** Format: date-time */
            hiredAt?: string;
            /**
             * Format: date-time
             * @description Alias of hiredAt for UI consistency
             */
            startDate?: string;
            /** Format: date-time */
            terminatedAt?: string;
            notes?: string;
        };
        PurchaseOrderLine: {
            productId: string;
            sku?: string;
            qty: number;
            /** @example each */
            uom?: string;
            unitPrice: number;
            /** @default 0 */
            receivedQty: number;
        };
        PurchaseOrder: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "purchaseOrder";
            vendorId: string;
            /** @enum {string} */
            status: "draft" | "submitted" | "approved" | "partially_received" | "received" | "canceled";
            /** @example USD */
            currency?: string;
            lines?: components["schemas"]["PurchaseOrderLine"][];
            totals?: {
                subtotal?: number;
                tax?: number;
                shipping?: number;
                total?: number;
            };
        };
        Receipt: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "receipt";
            purchaseOrderId: string;
            lines: {
                productId?: string;
                qty?: number;
                locationId?: string;
            }[];
            note?: string;
        };
        SalesOrderLine: {
            productId: string;
            sku?: string;
            qty: number;
            /** @example each */
            uom?: string;
            unitPrice: number;
            /** @default 0 */
            allocatedQty: number;
            /** @default 0 */
            fulfilledQty: number;
        };
        SalesOrder: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "salesOrder";
            clientId: string;
            /** @enum {string} */
            status: "draft" | "reserved" | "partially_fulfilled" | "fulfilled" | "canceled";
            /** @example USD */
            currency?: string;
            lines?: components["schemas"]["SalesOrderLine"][];
            totals?: {
                subtotal?: number;
                tax?: number;
                shipping?: number;
                total?: number;
            };
        };
        Fulfillment: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "fulfillment";
            salesOrderId: string;
            lines: {
                productId?: string;
                qty?: number;
                fromLocationId?: string;
            }[];
            carrier?: string;
            tracking?: string;
        };
        Integration: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "integration";
            /** @enum {string} */
            provider: "shopify" | "quickbooks" | "rfid" | "webhook" | "streaming";
            /** @enum {string} */
            status: "disabled" | "enabled";
            config?: {
                [key: string]: unknown;
            };
        };
        IntegrationRun: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "integrationRun";
            integrationId: string;
            /** Format: date-time */
            startedAt: string;
            /** Format: date-time */
            finishedAt?: string | null;
            /** @enum {string} */
            status: "queued" | "running" | "success" | "error";
            stats?: {
                [key: string]: unknown;
            };
            error?: string | null;
        };
    };
    responses: {
        /** @description Paged list of objects */
        ListPage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    items?: components["schemas"]["AnyObject"][];
                    next?: string | null;
                };
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error?: string;
                };
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        TenantHeader: string;
        TypePath: string;
        IdPath: string;
        Limit: number;
        Next: string;
        Q: string;
        Fields: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listObjects: {
        parameters: {
            query?: {
                q?: components["parameters"]["Q"];
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ListPage"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    createObject: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnyObject"];
            };
        };
        responses: {
            /** @description Created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    listObjectsExplicit: {
        parameters: {
            query?: {
                q?: components["parameters"]["Q"];
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ListPage"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    searchObjects: {
        parameters: {
            query?: {
                q?: components["parameters"]["Q"];
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ListPage"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    getObject: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
                id: components["parameters"]["IdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    replaceObject: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
                id: components["parameters"]["IdPath"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnyObject"];
            };
        };
        responses: {
            /** @description Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    deleteObject: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
                id: components["parameters"]["IdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    getPolicy: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    listViews: {
        parameters: {
            query?: {
                moduleKey?: string;
                ownerId?: string;
                shared?: boolean;
                isDefault?: boolean;
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewList"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    createView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description Created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    getView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    replaceView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    deleteView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    updateView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    listWorkspaces: {
        parameters: {
            query?: {
                ownerId?: string;
                shared?: boolean;
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceList"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    createWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Workspace"];
            };
        };
        responses: {
            /** @description Created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    getWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    replaceWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Workspace"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    deleteWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    updateWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    listAudit: {
        parameters: {
            query?: {
                since?: string;
                limit?: number;
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
}
