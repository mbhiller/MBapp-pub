/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/objects/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List objects */
        get: operations["listObjects"];
        put?: never;
        /**
         * Upsert (create or update by id)
         * @description POST behaves as **upsert**. If `id` is provided, updates the object;
         *     otherwise creates a new one.
         *
         */
        post: operations["upsertObject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one object */
        get: operations["getObjectById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example VALIDATION_ERROR */
            code?: string;
            /** @example Invalid 'eventId' parameter */
            message?: string;
            details?: {
                [key: string]: unknown;
            };
        };
        Base: {
            /** @description UUID */
            id: string;
            type: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            externalId?: string;
        };
        ListPage: {
            items: components["schemas"]["AnyObject"][];
            next?: string | null;
            /** @default 20 */
            limit: number;
        };
        Client: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "client";
            name: string;
            displayName?: string;
            firstName?: string;
            lastName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        Account: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "account";
            name: string;
            number?: string;
            currency?: string;
            /** @description e.g., asset, liability, revenue */
            accountType?: string;
            /** @description Current balance (display only) */
            balance?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Product: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "product";
            name: string;
            /** @enum {string} */
            kind?: "good" | "service";
            sku?: string;
            price?: number;
            taxCode?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        InventoryItem: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "inventory";
            /** @description Optional link to a product */
            productId?: string;
            name?: string;
            sku?: string;
            quantity?: number;
            /** @description Unit of measure */
            uom?: string;
            location?: string;
            minQty?: number;
            maxQty?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        Resource: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "resource";
            name: string;
            code?: string;
            /** Format: uri */
            url?: string;
            /** Format: date-time */
            expiresAt?: string;
        };
        Event: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "event";
            name: string;
            description?: string;
            location?: string;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * @default available
             * @enum {string}
             */
            status: "available" | "unavailable" | "maintenance";
            capacity?: number;
            notes?: string;
        };
        Registration: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "registration";
            eventId: string;
            clientId?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "cancelled" | "checked_in" | "completed";
            /** Format: date-time */
            registeredAt?: string;
            notes?: string;
        };
        Reservation: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "reservation";
            resourceId: string;
            /**
             * Format: date-time
             * @description Alias of startsAt
             */
            start?: string;
            /**
             * Format: date-time
             * @description Alias of endsAt
             */
            end?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            clientId?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "cancelled" | "checked_in" | "completed";
            notes?: string;
        };
        Vendor: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "vendor";
            name: string;
            displayName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            notes?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Employee: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "employee";
            displayName: string;
            /** Format: email */
            email?: string;
            phone?: string;
            role?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "terminated";
            /** Format: date-time */
            hiredAt?: string;
            /**
             * Format: date-time
             * @description Alias of hiredAt for UI consistency
             */
            startDate?: string;
            /** Format: date-time */
            terminatedAt?: string;
            notes?: string;
        };
        AnyObject: components["schemas"]["Client"] | components["schemas"]["Account"] | components["schemas"]["Product"] | components["schemas"]["InventoryItem"] | components["schemas"]["Resource"] | components["schemas"]["Event"] | components["schemas"]["Registration"] | components["schemas"]["Reservation"] | components["schemas"]["Vendor"] | components["schemas"]["Employee"];
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Validation error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listObjects: {
        parameters: {
            query?: {
                /** @description Free-text search */
                q?: string;
                by?: "updatedAt" | "createdAt" | "name";
                sort?: "asc" | "desc";
                limit?: number;
                next?: string | null;
                /** @description Filter registrations by event (when type=registration) */
                eventId?: string;
            };
            header?: never;
            path: {
                /** @description Object type key (e.g., product, client, account, inventory, resource, event, registration, reservation, vendor, employee) */
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPage"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    upsertObject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnyObject"];
            };
        };
        responses: {
            /** @description Saved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnyObject"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["Unauthorized"];
        };
    };
    getObjectById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnyObject"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
}
