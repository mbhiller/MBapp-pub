/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/objects/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List objects (alias; same as /objects/{type}/list) */
        get: {
            parameters: {
                query?: {
                    limit?: components["parameters"]["Limit"];
                    next?: components["parameters"]["Next"];
                    by?: components["parameters"]["By"];
                    sort?: components["parameters"]["Sort"];
                    fields?: components["parameters"]["Fields"];
                    q?: components["parameters"]["Q"];
                    eventId?: components["parameters"]["EventId"];
                };
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListPage"];
            };
        };
        put?: never;
        /** Create object */
        post: {
            parameters: {
                query?: never;
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AnyObject"];
                };
            };
            responses: {
                /** @description Created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnyObject"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List objects */
        get: {
            parameters: {
                query?: {
                    limit?: components["parameters"]["Limit"];
                    next?: components["parameters"]["Next"];
                    by?: components["parameters"]["By"];
                    sort?: components["parameters"]["Sort"];
                    fields?: components["parameters"]["Fields"];
                    q?: components["parameters"]["Q"];
                    eventId?: components["parameters"]["EventId"];
                };
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListPage"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search objects (lightweight query + in-page filter) */
        get: {
            parameters: {
                query?: {
                    q?: components["parameters"]["Q"];
                    limit?: components["parameters"]["Limit"];
                    next?: components["parameters"]["Next"];
                    fields?: components["parameters"]["Fields"];
                };
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListPage"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get object by id */
        get: {
            parameters: {
                query?: {
                    fields?: components["parameters"]["Fields"];
                };
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnyObject"];
                    };
                };
            };
        };
        /** Update object */
        put: {
            parameters: {
                query?: never;
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AnyObject"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnyObject"];
                    };
                };
            };
        };
        post?: never;
        /** Delete object */
        delete: {
            parameters: {
                query?: never;
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path: {
                    type: components["parameters"]["TypePath"];
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id?: string;
                            type?: string;
                            deleted?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get RBAC policy for current user & tenant */
        get: {
            parameters: {
                query?: never;
                header: {
                    "x-tenant-id": components["parameters"]["TenantHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Policy"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example VALIDATION_ERROR */
            code?: string;
            /** @example Invalid 'eventId' parameter */
            message?: string;
            details?: {
                [key: string]: unknown;
            };
        };
        Base: {
            /** @description UUID */
            id: string;
            type: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            externalId?: string;
        };
        ListPage: {
            items: components["schemas"]["AnyObject"][];
            next?: string | null;
            /** @default 20 */
            limit: number;
        };
        Client: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "client";
            name: string;
            displayName?: string;
            firstName?: string;
            lastName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        Account: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "account";
            name: string;
            number?: string;
            currency?: string;
            /** @description e.g., asset, liability, revenue */
            accountType?: string;
            /** @description Current balance (display only) */
            balance?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Product: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "product";
            name: string;
            /** @enum {string} */
            kind?: "good" | "service";
            sku?: string;
            price?: number;
            taxCode?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        InventoryItem: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "inventory";
            /** @description Optional link to a product */
            productId?: string;
            name?: string;
            sku?: string;
            quantity?: number;
            /** @description Unit of measure */
            uom?: string;
            location?: string;
            minQty?: number;
            maxQty?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
        };
        Resource: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "resource";
            name: string;
            code?: string;
            /** Format: uri */
            url?: string;
            /** Format: date-time */
            expiresAt?: string;
        };
        Event: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "event";
            name: string;
            description?: string;
            location?: string;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * @default available
             * @enum {string}
             */
            status: "available" | "unavailable" | "maintenance";
            capacity?: number;
            notes?: string;
        };
        Registration: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "registration";
            eventId: string;
            clientId?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "cancelled" | "checked_in" | "completed";
            /** Format: date-time */
            registeredAt?: string;
            notes?: string;
        };
        Reservation: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "reservation";
            resourceId: string;
            /**
             * Format: date-time
             * @description Alias of startsAt
             */
            start?: string;
            /**
             * Format: date-time
             * @description Alias of endsAt
             */
            end?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            clientId?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "cancelled" | "checked_in" | "completed";
            notes?: string;
        };
        Vendor: components["schemas"]["Base"] & {
            /** @enum {string} */
            type?: "vendor";
            name: string;
            displayName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            notes?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Employee: components["schemas"]["Base"] & {
            /** @enum {string} */
            type: "employee";
            displayName: string;
            /** Format: email */
            email?: string;
            phone?: string;
            role?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "terminated";
            /** Format: date-time */
            hiredAt?: string;
            /**
             * Format: date-time
             * @description Alias of hiredAt for UI consistency
             */
            startDate?: string;
            /** Format: date-time */
            terminatedAt?: string;
            notes?: string;
        };
        Policy: {
            roles: string[];
            permissions: string[];
        };
        AnyObject: components["schemas"]["Client"] | components["schemas"]["Account"] | components["schemas"]["Product"] | components["schemas"]["InventoryItem"] | components["schemas"]["Resource"] | components["schemas"]["Event"] | components["schemas"]["Registration"] | components["schemas"]["Reservation"] | components["schemas"]["Vendor"] | components["schemas"]["Employee"];
    };
    responses: {
        /** @description Paginated list response */
        ListPage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ListPage"];
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Validation error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        TenantHeader: string;
        TypePath: string;
        IdPath: string;
        Limit: number;
        Next: string;
        By: "createdAt" | "updatedAt";
        Sort: "asc" | "desc";
        Fields: string;
        Q: string;
        EventId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
