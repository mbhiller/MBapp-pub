/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/objects/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Objects by Type */
        get: operations["listObjects"];
        put?: never;
        /** Post Objects */
        post: operations["createObject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Objects List */
        get: operations["listObjectsExplicit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Objects by Type */
        get: operations["searchObjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Objects by Type and ID */
        get: operations["getObject"];
        /** Update Objects */
        put: operations["replaceObject"];
        post?: never;
        /** Delete Objects */
        delete: operations["deleteObject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get AUTH */
        get: operations["getPolicy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Views (role-aware) */
        get: operations["listViews"];
        put?: never;
        /** Create a View */
        post: operations["createView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/views/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a View */
        get: operations["getView"];
        /** Replace a View */
        put: operations["replaceView"];
        post?: never;
        /** Delete a View */
        delete: operations["deleteView"];
        options?: never;
        head?: never;
        /** Update a View (partial) */
        patch: operations["updateView"];
        trace?: never;
    };
    "/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Workspaces (role-aware) */
        get: operations["listWorkspaces"];
        put?: never;
        /** Create a Workspace */
        post: operations["createWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a Workspace */
        get: operations["getWorkspace"];
        /** Replace a Workspace */
        put: operations["replaceWorkspace"];
        post?: never;
        /** Delete a Workspace */
        delete: operations["deleteWorkspace"];
        options?: never;
        head?: never;
        /** Update a Workspace (partial) */
        patch: operations["updateWorkspace"];
        trace?: never;
    };
    "/inventory/{id}/onhand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get computed counters for an inventory item */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Computed counters (array with one element) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["InventoryCounters"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/onhand:batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch counters query (array) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        itemIds: string[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["InventoryCounters"][];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/{id}/movements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List movements for an inventory item */
        get: {
            parameters: {
                query?: {
                    next?: string | null;
                    limit?: number;
                    sort?: "asc" | "desc";
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged list of inventory movements (array) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListPageInventoryMovement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/{id}/adjust": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adjust on-hand (creates movement) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["InventoryAdjustmentRequest"];
                };
            };
            responses: {
                /** @description Adjustment recorded as an inventory movement */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InventoryMovement"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/po/{id}:submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit purchase order */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PurchaseOrder"];
                    };
                };
                /** @description Guardrail violation (e.g., invalid status transition) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/po/{id}:approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve purchase order */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PurchaseOrder"];
                    };
                };
                /** @description Only submitted can approve */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/po/{id}:receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Receive against purchase order lines
         * @description Allowed from **approved** or **partially_fulfilled**. Over-receive returns 409.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PurchaseOrderReceiveRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PurchaseOrder"];
                    };
                };
                /** @description Over-receive or invalid status */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/po/{id}:cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel purchase order
         * @description Allowed from **draft**\/**submitted**. Returns 409 otherwise.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PurchaseOrder"];
                    };
                };
                /** @description Guardrail violation */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/po/{id}:close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Close purchase order
         * @description Allowed from **fulfilled**. Returns 409 otherwise.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PurchaseOrder"];
                    };
                };
                /** @description Guardrail violation */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-orders/{id}/receive-line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Receive a specific PO line
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        lineId: string;
                        qty: number;
                        lot?: string | null;
                        location?: string | null;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PurchaseOrder"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/suggest-po": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Build a PO draft from backorder requests */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        requests?: {
                            backorderRequestId: string;
                        }[];
                        vendorId?: string | null;
                    };
                };
            };
            responses: {
                /** @description One or more purchase order drafts (not persisted) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestPoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchasing/po:create-from-suggestion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Persist purchase order draft(s) created from suggestion */
        post: operations["createPoFromSuggestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/backorderRequest/{id}:ignore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a BackorderRequest as ignored */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated BackorderRequest */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackorderRequest"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/backorderRequest/{id}:convert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a BackorderRequest as converted (attached to a PO) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated BackorderRequest */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackorderRequest"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit sales order */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Commit/allocate inventory for a sales order
         * @description Default is non-strict (200 with `shortages[]` when partially available).
         *     Set `?strict=1` or `{ "strict": true }` to require full availability (409 on shortage).
         *
         */
        post: {
            parameters: {
                query?: {
                    strict?: 0 | 1;
                };
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SalesCommitRequest"];
                };
            };
            responses: {
                /** @description OK (may include `shortages[]` when non-strict) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesCommitResponse"];
                    };
                };
                /** @description Insufficient availability in strict mode */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesCommitResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:reserve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reserve specific line quantities on a sales order
         * @description Valid from **submitted** or **committed**.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SalesOrderReserveRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
                /** @description Insufficient availability */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            shortages?: {
                                lineId?: string;
                                itemId?: string;
                                requested?: number;
                                available?: number;
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Release previously reserved quantity */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SalesOrderReleaseRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
                /** @description Guardrail violation */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:fulfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fulfill (ship/pick) SO lines */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        lines?: {
                            lineId: string;
                            /** @description Quantity shipped/picked */
                            deltaQty: number;
                            locationId?: string;
                            lot?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
                /** @description Guardrail violation (over-fulfill or invalid status) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel sales order
         * @description Blocked when **net reservations > 0** or **any fulfillments** exist.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
                /** @description Guardrail violation */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/so/{id}:close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close sales order (allowed from fulfilled) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales-orders/{id}/fulfill-line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fulfill a specific SO line
         * @deprecated
         * @description Use `POST /sales/so/{id}:fulfill` instead.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        lineId: string;
                        qty: number;
                        lot?: string | null;
                        location?: string | null;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SalesOrder"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/routing/graph": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upsert nodes and edges for routing (idempotent) */
        post: operations["upsertRoutingGraph"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/routing/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a route plan from tasks and objective */
        post: operations["createRoutePlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/routing/plan/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a route plan by id */
        get: operations["getRoutePlan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/registration/{id}:cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a registration */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated registration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registration"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/registration/{id}:checkin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check in a registration */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated registration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registration"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/registration/{id}:checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check out a registration */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated registration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registration"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/reservation/{id}:cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a reservation */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated reservation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reservation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/reservation/{id}:start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a reservation (resource now in use) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated reservation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reservation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/reservation/{id}:end": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** End a reservation (resource returned) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Optional idempotency key for safe retries. */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated reservation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reservation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/epc/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve EPC to item */
        get: {
            parameters: {
                query: {
                    epc: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            itemId?: string;
                            status?: string;
                        };
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scanner/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start/stop a scanner session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        op?: "start" | "stop";
                        /** @description Required for stop */
                        sessionId?: string;
                        workspaceId?: string | null;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScannerSession"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scanner/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Record a scanner action (pick/receive/count/move) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        action: "pick" | "receive" | "count" | "move";
                        epc: string;
                        /** @default 1 */
                        qty?: number;
                        soId?: string;
                        lineId?: string;
                        fromLocationId?: string;
                        toLocationId?: string;
                    };
                };
            };
            responses: {
                /** @description Recorded */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScannerAction"];
                    };
                };
                /** @description Guardrail violation */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scanner/simulate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Dev only - generate EPCs bound to itemIds */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @default 10 */
                        count?: number;
                        itemId?: string | null;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created?: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Audit */
        get: operations["listAudit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Account: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "account";
            name: string;
            number?: string;
            /** @default USD */
            currency: string;
            /**
             * @description e.g., asset, liability, revenue, expense, equity
             * @enum {string}
             */
            accountType?: "asset" | "liability" | "revenue" | "expense" | "equity";
            /** @description Current balance (display only) */
            readonly balance?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
        };
        Address: {
            address1?: string;
            address2?: string | null;
            city?: string | null;
            state?: string | null;
            postal?: string | null;
            country?: string | null;
        };
        AnyObject: {
            [key: string]: unknown;
        };
        BackorderRequest: {
            id: string;
            /** @enum {string} */
            type: "backorderRequest";
            /** @description Optional denormalized vendor preference for UI filtering */
            preferredVendorId?: string | null;
            soId: string;
            soLineId: string;
            itemId: string;
            qty: number;
            /** Format: date-time */
            createdAt: string;
            /**
             * @default open
             * @enum {string}
             */
            status: "open" | "ignored" | "converted";
        };
        Class: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "class";
            divisionId?: string | null;
            code?: string;
            name: string;
            description?: string | null;
            fee?: number | null;
            order?: number | null;
            rules?: string[] | null;
            notes?: string | null;
        };
        CustomerAccount: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type?: "customerAccount";
            partyId: string;
            termsId?: string | null;
            creditLimit?: number | null;
            priceListId?: string | null;
            /** @default false */
            taxExempt: boolean;
            defaultBillToId?: string | null;
            defaultShipToId?: string | null;
        };
        Division: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "division";
            code?: string;
            name: string;
            description?: string | null;
            fee?: number | null;
            rules?: string[] | null;
            notes?: string | null;
        };
        Employee: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "employee";
            name: string;
            displayName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            role?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "terminated";
            /** Format: date-time */
            hiredAt?: string;
            /**
             * Format: date-time
             * @description Alias of hiredAt for UI consistency
             */
            startDate?: string;
            /** Format: date-time */
            terminatedAt?: string;
            notes?: string;
        };
        EpcBinding: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "epcBinding";
            epc: string;
            itemId: string;
            locationId?: string;
            lot?: string | null;
            /**
             * @default active
             * @enum {string}
             */
            state: "active" | "retired";
        };
        EPCMap: {
            /** @description Use EPC string as id */
            id: string;
            /**
             * @default epcMap
             * @enum {string}
             */
            type: "epcMap";
            epc: string;
            itemId: string;
            lotId?: string | null;
            locationId?: string | null;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "retired";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Error: {
            /** @description Human-readable summary */
            message: string;
            /** @description Stable error code (e.g., insufficient_available_to_commit) */
            code?: string;
            details?: {
                [key: string]: unknown;
            }[];
        };
        Event: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "event";
            name: string;
            description?: string;
            location?: string;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt?: string;
            /**
             * Format: date-time
             * @description Alias of startsAt (deprecated)
             */
            start?: string;
            /**
             * Format: date-time
             * @description Alias of endsAt (deprecated)
             */
            end?: string;
            /**
             * @default draft
             * @enum {string}
             */
            status: "draft" | "scheduled" | "open" | "closed" | "completed" | "cancelled" | "archived";
            capacity?: number;
            notes?: string;
            lines?: components["schemas"]["EventLine"][];
        };
        EventLine: {
            id?: string;
            classId: string;
            capacity?: number | null;
            fee?: number | null;
            note?: string | null;
        };
        GoodsReceipt: components["schemas"]["ObjectBase"] & {
            id?: string;
            /** @enum {string} */
            type: "goodsReceipt";
            tenantId?: string;
            poId: string;
            userId?: string | null;
            /** Format: date-time */
            ts: string | null;
            lines: {
                lineId: string;
                itemId?: string | null;
                deltaQty: number;
                lot?: string | null;
                locationId?: string | null;
            }[];
            notes?: string | null;
            attachments?: string[];
        };
        GoodsReceiptLine: {
            lineId: string;
            deltaQty: number;
            locationId?: string | null;
            lot?: string | null;
        };
        Integration: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "integration";
            /** @enum {string} */
            provider: "shopify" | "quickbooks" | "rfid" | "webhook" | "streaming";
            /** @enum {string} */
            status: "disabled" | "enabled";
            config?: {
                [key: string]: unknown;
            };
        };
        IntegrationRun: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "integrationRun";
            integrationId: string;
            /** Format: date-time */
            startedAt: string;
            /** Format: date-time */
            finishedAt?: string | null;
            /** @enum {string} */
            status: "queued" | "running" | "success" | "error";
            stats?: {
                [key: string]: unknown;
            };
            error?: string | null;
        };
        InventoryAdjustmentRequest: {
            reason: string;
            deltaQty: number;
            notes?: string | null;
        };
        InventoryItem: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "inventory";
            productId?: string | null;
            name: string;
            sku?: string;
            /**
             * @deprecated
             * @description Deprecated – use /inventory/{id}/onhand
             */
            quantity?: number;
            uom?: string;
            location?: string | null;
            minQty?: number | null;
            maxQty?: number | null;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string | null;
            /** @default false */
            lotTracked: boolean;
            barcode?: string | null;
            tags?: string[];
        };
        InventoryMovement: {
            id: string;
            itemId: string;
            /** @enum {string} */
            action: "receive" | "reserve" | "commit" | "fulfill" | "adjust" | "release";
            qty: number;
            /** Format: date-time */
            at?: string;
            note?: string;
            actorId?: string;
            refId?: string;
            /** @enum {string} */
            readonly docType?: "inventoryMovement";
        };
        /**
         * @deprecated
         * @description Deprecated – use InventoryCounters & GET /inventory/{id}/onhand
         */
        InventoryOnHand: {
            id: string;
            qtyOnHand: number;
            qtyAvailable?: number | null;
            /** Format: date-time */
            asOf?: string;
        };
        ListPageInventoryMovement: {
            itemId: string;
            items: components["schemas"]["InventoryMovement"][];
            /** @description Opaque cursor for next page (if any) */
            next?: string | null;
        };
        Message: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "message";
            /** @enum {string} */
            channel: "push" | "sms" | "email";
            subject?: string | null;
            body: string;
            segment?: {
                [key: string]: unknown;
            } | null;
            /** Format: date-time */
            scheduleAt?: string | null;
            /** Format: date-time */
            sentAt?: string | null;
            /**
             * @default queued
             * @enum {string}
             */
            status: "queued" | "sending" | "sent" | "failed" | "cancelled";
            notes?: string | null;
        };
        MoneyTotals: {
            subtotal?: number;
            tax?: number;
            shipping?: number;
            discount?: number;
            total?: number;
        };
        ObjectBase: {
            readonly id: string;
            readonly tenantId: string;
            type?: string;
            /** Format: date-time */
            readonly createdAt: string;
            /** Format: date-time */
            readonly updatedAt: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
        Organization: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "organization";
            name: string;
            /**
             * @example federation
             * @enum {string}
             */
            kind?: "club" | "federation" | "venueOp" | "sponsor";
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string | null;
            metadata?: {
                [key: string]: unknown;
            } | null;
            code?: string | null;
            /** Format: uri */
            website?: string | null;
            phone?: string | null;
            /** Format: email */
            email?: string | null;
            address?: string | null;
            prefs?: {
                [key: string]: unknown;
            } | null;
        };
        Party: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "party";
            /** @enum {string} */
            kind: "person" | "organization" | "animal";
            displayName: string;
            firstName?: string;
            lastName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            addresses?: components["schemas"]["Address"][];
            tags?: string[];
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string;
            /** @description Denormalized role membership for fast gates. */
            roleFlags?: {
                [key: string]: boolean;
            };
            /** @description Optional array for UI; roleFlags is the source of truth. */
            roles?: string[];
        };
        PartyLink: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "partyLink";
            aPartyId: string;
            bPartyId: string;
            /** @enum {string} */
            kind: "employs" | "member_of" | "owns" | "handles" | "parent" | "affiliate";
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            notes?: string;
        };
        PartyRole: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "partyRole";
            partyId: string;
            /** @enum {string} */
            role: "customer" | "vendor" | "employee" | "event_staff" | "rider" | "owner" | "judge";
            /** @default true */
            active: boolean;
            notes?: string;
        };
        Policy: {
            tenantId?: string;
            userId?: string;
            roles: string[];
            permissions: string[];
            ui?: {
                allowedModuleKeys?: string[];
                allowedViews?: {
                    id?: string;
                    moduleKey?: string;
                }[];
                allowedWorkspaces?: {
                    id?: string;
                    name?: string;
                }[];
            };
        };
        Product: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "product";
            name: string;
            /**
             * @default good
             * @enum {string}
             */
            kind: "good" | "service";
            sku?: string;
            price?: number | null;
            /**
             * @description If false, never auto-suggest PO for shortages.
             * @default true
             */
            reorderEnabled: boolean;
            preferredVendorId?: string | null;
            minOrderQty?: number | null;
            leadTimeDays?: number | null;
            taxCode?: string | null;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            notes?: string | null;
            defaultItemId?: string | null;
            tags?: string[];
        };
        PurchaseOrderLine: {
            id: string;
            /** @description InventoryItem.id */
            itemId: string;
            productId?: string | null;
            description?: string | null;
            uom: string;
            /** @description Ordered quantity */
            qty: number;
            /** @default 0 */
            qtyReceived: number;
            unitPrice?: number | null;
            taxRate?: number | null;
            lineTotal?: number | null;
            locationId?: string | null;
            lot?: string | null;
            /** Format: date-time */
            expectedDate?: string | null;
        };
        PurchaseOrder: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "purchaseOrder";
            vendorAccountId?: string;
            vendorId: string;
            vendorName?: string;
            partyId?: string;
            /** @enum {string} */
            partyKind?: "person" | "organization" | "animal";
            orderNumber?: string;
            /** @enum {string} */
            status: "draft" | "submitted" | "approved" | "partially_fulfilled" | "fulfilled" | "cancelled" | "closed";
            /** @default USD */
            currency: string;
            notes?: string;
            totals?: components["schemas"]["MoneyTotals"];
            shipTo?: {
                name?: string;
                address1?: string;
                address2?: string;
                city?: string;
                state?: string;
                postal?: string;
                country?: string;
            };
            billTo?: {
                name?: string;
                address1?: string;
                address2?: string;
                city?: string;
                state?: string;
                postal?: string;
                country?: string;
            };
            lines?: components["schemas"]["PurchaseOrderLine"][];
        };
        /** @description Single vendor returns `draft`; multi-vendor returns `drafts`. */
        SuggestPoResponse: {
            draft: components["schemas"]["PurchaseOrder"];
        } | {
            drafts: components["schemas"]["PurchaseOrder"][];
        };
        PurchaseOrderReceiveRequest: {
            /** @deprecated */
            idempotencyKey?: string;
            lines: {
                lineId: string;
                deltaQty: number;
                locationId?: string;
                lot?: string;
            }[];
        };
        Registration: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "registration";
            eventId: string;
            clientId: string;
            clientName?: string | null;
            /** @default 1 */
            qty: number;
            /** Format: date-time */
            startsAt?: string | null;
            /** Format: date-time */
            endsAt?: string | null;
            /**
             * Format: date-time
             * @description Alias of startsAt (deprecated)
             */
            start?: string | null;
            /**
             * Format: date-time
             * @description Alias of endsAt (deprecated)
             */
            end?: string | null;
            /** Format: date-time */
            registeredAt?: string | null;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "checked_in" | "checked_out" | "cancelled";
            notes?: string | null;
            partyId?: string;
            /** @enum {string} */
            partyKind?: "person" | "organization" | "animal";
            lines?: components["schemas"]["RegistrationLine"][];
        };
        RegistrationLine: {
            id?: string;
            classId: string;
            /** @default 1 */
            qty: number;
            note?: string | null;
        };
        Reservation: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "reservation";
            resourceId: string;
            resourceName?: string | null;
            eventId?: string | null;
            clientId: string;
            clientName?: string | null;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt: string;
            /**
             * Format: date-time
             * @description Alias of startsAt (deprecated)
             */
            start?: string;
            /**
             * Format: date-time
             * @description Alias of endsAt (deprecated)
             */
            end?: string;
            /**
             * @default pending
             * @enum {string}
             */
            status: "pending" | "confirmed" | "in_use" | "checked_in" | "completed" | "cancelled";
            notes?: string | null;
            partyId?: string;
            /** @enum {string} */
            partyKind?: "person" | "organization" | "animal";
            rate?: number | null;
            price?: number | null;
            conflictKey?: string | null;
        };
        Resource: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "resource";
            name: string;
            code?: string | null;
            /** Format: uri */
            url?: string | null;
            /** Format: date-time */
            expiresAt?: string | null;
            /**
             * @default other
             * @enum {string}
             */
            resourceType: "stall" | "rv" | "arena" | "equipment" | "other";
            /**
             * @default available
             * @enum {string}
             */
            status: "available" | "unavailable" | "maintenance";
            capacity?: number | null;
            location?: string | null;
            tags?: string[];
            notes?: string | null;
        };
        SalesFulfillmentLine: {
            lineId: string;
            deltaQty: number;
            locationId?: string | null;
            lot?: string | null;
        };
        SalesFulfillment: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "salesFulfillment";
            soId: string;
            userId?: string | null;
            /** Format: date-time */
            ts: string;
            lines: components["schemas"]["SalesFulfillmentLine"][];
            carrier?: string | null;
            tracking?: string | null;
            notes?: string | null;
            attachments?: string[];
        };
        SalesOrder: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "salesOrder";
            partyId: string;
            customerId?: string;
            /** @enum {string} */
            partyKind?: "person" | "organization" | "animal";
            orderNumber?: string;
            customerName?: string;
            /** @enum {string} */
            status: "draft" | "submitted" | "committed" | "partially_fulfilled" | "fulfilled" | "cancelled" | "closed";
            /** @default USD */
            currency: string;
            notes?: string;
            totals?: components["schemas"]["MoneyTotals"];
            billTo?: {
                name?: string;
                address1?: string;
                address2?: string;
                city?: string;
                state?: string;
                postal?: string;
                country?: string;
            };
            shipTo?: {
                name?: string;
                address1?: string;
                address2?: string;
                city?: string;
                state?: string;
                postal?: string;
                country?: string;
            };
            lines?: components["schemas"]["SalesOrderLine"][];
            /** @description Present when non-strict commit recorded shortages */
            backorders?: {
                lineId?: string;
                itemId?: string;
                backordered?: number;
            }[];
        };
        SalesOrderLine: {
            id: string;
            itemId: string;
            productId?: string | null;
            description?: string | null;
            uom: string;
            qty: number;
            /** @default 0 */
            qtyCommitted: number;
            /** @default 0 */
            qtyFulfilled: number;
            unitPrice?: number | null;
            taxRate?: number | null;
            lineTotal?: number | null;
            locationId?: string | null;
            lot?: string | null;
            /** Format: date-time */
            expectedDate?: string | null;
        };
        ScannerAction: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "scannerAction";
            /** @enum {string} */
            action: "pick" | "receive" | "count" | "move";
            /** @description EPC as scanned */
            epc: string;
            itemId: string;
            /** Format: date-time */
            ts: string;
            sessionId?: string;
            soId?: string;
            lineId?: string;
            fromLocationId?: string;
            toLocationId?: string;
            /** @default 1 */
            qty: number;
            notes?: string;
        };
        ScannerSession: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "scannerSession";
            userId: string;
            workspaceId?: string;
            /** @enum {string} */
            status: "active" | "stopped";
            /** Format: date-time */
            startedAt: string;
            /** Format: date-time */
            stoppedAt?: string | null;
        };
        SalesOrderReserveRequest: {
            lines: {
                lineId: string;
                deltaQty: number;
            }[];
        };
        SalesOrderReleaseRequest: {
            lines: {
                lineId: string;
                deltaQty: number;
                reason?: string;
            }[];
        };
        SalesCommitRequest: {
            /** @description Same as ?strict=1 */
            strict?: boolean;
        };
        SalesCommitResponse: components["schemas"]["SalesOrder"] & {
            /** @description Present when strict=false and availability is partial */
            shortages?: {
                lineId?: string;
                itemId?: string;
                backordered?: number;
            }[];
        };
        Scorecard: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "scorecard";
            eventId: string;
            classId: string;
            template?: {
                [key: string]: unknown;
            };
            entries?: Record<string, never>[] | null;
            /**
             * @default draft
             * @enum {string}
             */
            status: "draft" | "published" | "archived";
            notes?: string | null;
        };
        VendorAccount: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type?: "vendorAccount";
            partyId: string;
            termsId?: string | null;
            remitToAddressId?: string | null;
            /** @default false */
            is1099: boolean;
            defaultExpenseAccount?: string | null;
            defaultCOGSAccount?: string | null;
        };
        Venue: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "venue";
            name: string;
            address?: string | null;
            timezone?: string | null;
            geo?: {
                lat?: number;
                lon?: number;
            } | null;
            notes?: string | null;
        };
        View: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "view";
            /** @description e.g., products, inventory, events */
            moduleKey: string;
            name: string;
            queryJSON: {
                [key: string]: unknown;
            };
            ownerId?: string | null;
            shared?: boolean;
            isDefault?: boolean;
        };
        ViewList: {
            items?: components["schemas"]["View"][];
            next?: string | null;
        };
        Workspace: components["schemas"]["ObjectBase"] & {
            /** @enum {string} */
            type: "workspace";
            name: string;
            tiles: components["schemas"]["WorkspaceTile"][];
            ownerId?: string | null;
            shared?: boolean;
        };
        WorkspaceList: {
            items?: components["schemas"]["Workspace"][];
            next?: string | null;
        };
        WorkspaceTile: {
            moduleKey: string;
            viewId?: string | null;
            inlineQuery?: {
                [key: string]: unknown;
            } | null;
            layout?: {
                [key: string]: unknown;
            };
        };
        InventoryCounters: {
            itemId: string;
            onHand: number;
            reserved: number;
            available: number;
            /** Format: date-time */
            asOf?: string;
        };
        LocationNode: {
            id: string;
            name: string;
            /** @enum {string} */
            kind: "facility" | "hub" | "address" | "geo";
            coords?: {
                lat?: number;
                lng?: number;
            };
            attributes?: {
                [key: string]: unknown;
            };
            /** @default true */
            active: boolean;
        };
        PathEdge: {
            id: string;
            fromNodeId: string;
            toNodeId: string;
            distanceKm: number;
            durationMin?: number;
            cost?: number;
            /** @default false */
            isClosed: boolean;
            attributes?: {
                [key: string]: unknown;
            };
        };
        Carrier: {
            id: string;
            name: string;
            modes?: ("ground" | "air" | "horse" | "internal")[];
            contactPartyId?: string;
            attributes?: {
                [key: string]: unknown;
            };
        };
        DeliveryTask: {
            id: string;
            /** @description SO/PO/Reservation id or composite */
            orderRef?: string;
            partyId: string;
            fromNodeId: string;
            toNodeId: string;
            window?: {
                /** Format: date-time */
                start?: string;
                /** Format: date-time */
                end?: string;
            };
            /** @enum {string} */
            status?: "draft" | "planned" | "enroute" | "delivered" | "failed" | "cancelled";
            attributes?: {
                [key: string]: unknown;
            };
        };
        RoutePlan: {
            id: string;
            /** @enum {string} */
            objective: "shortest" | "fastest" | "cheapest" | "balanced";
            constraints?: {
                closures?: string[];
                forbiddenNodes?: string[];
                maxHoursPerDriver?: number;
            };
            carrierId?: string;
            tasks: {
                id?: string;
            }[];
            summary?: {
                distanceKm?: number;
                totalDurationMin?: number;
                totalCost?: number;
            };
            /**
             * @default draft
             * @enum {string}
             */
            status: "draft" | "planned" | "executed" | "archived";
        };
    };
    responses: {
        /** @description Error response */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message?: string;
                    code?: string;
                    details?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        /** @description Paged list of objects */
        ListPage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    items?: components["schemas"]["AnyObject"][];
                    next?: string | null;
                };
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error?: string;
                };
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description Optional idempotency key for safe retries. */
        IdempotencyKey: string;
        TenantHeader: string;
        TypePath: string;
        IdPath: string;
        Limit: number;
        Next: string;
        Q: string;
        Fields: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listObjects: {
        parameters: {
            query?: {
                q?: components["parameters"]["Q"];
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ListPage"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    createObject: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnyObject"];
            };
        };
        responses: {
            /** @description Created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    listObjectsExplicit: {
        parameters: {
            query?: {
                q?: components["parameters"]["Q"];
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ListPage"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    searchObjects: {
        parameters: {
            query?: {
                q?: components["parameters"]["Q"];
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ListPage"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    getObject: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
                id: components["parameters"]["IdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    replaceObject: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                type: components["parameters"]["TypePath"];
                id: components["parameters"]["IdPath"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnyObject"];
            };
        };
        responses: {
            /** @description Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    deleteObject: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                type: components["parameters"]["TypePath"];
                id: components["parameters"]["IdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    getPolicy: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    listViews: {
        parameters: {
            query?: {
                moduleKey?: string;
                ownerId?: string;
                shared?: boolean;
                isDefault?: boolean;
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewList"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    createView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description Created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    getView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    replaceView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    deleteView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    updateView: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["View"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    listWorkspaces: {
        parameters: {
            query?: {
                ownerId?: string;
                shared?: boolean;
                limit?: components["parameters"]["Limit"];
                next?: components["parameters"]["Next"];
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceList"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    createWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Workspace"];
            };
        };
        responses: {
            /** @description Created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    getWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    replaceWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Workspace"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    deleteWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    updateWorkspace: {
        parameters: {
            query?: never;
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
                /** @description Optional idempotency key for safe retries. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
        };
    };
    createPoFromSuggestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    draft: components["schemas"]["PurchaseOrder"];
                } | {
                    drafts: components["schemas"]["PurchaseOrder"][];
                };
            };
        };
        responses: {
            /** @description Created id(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Convenience when exactly one was created */
                        id?: string;
                        ids?: string[];
                    };
                };
            };
        };
    };
    upsertRoutingGraph: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    nodes?: components["schemas"]["LocationNode"][];
                    edges?: components["schemas"]["PathEdge"][];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createRoutePlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    objective?: "shortest" | "fastest" | "cheapest" | "balanced";
                    constraints?: components["schemas"]["RoutePlan"]["constraints"];
                    carrierId?: string;
                    tasks?: components["schemas"]["DeliveryTask"][];
                    graph?: {
                        nodes?: components["schemas"]["LocationNode"][];
                        edges?: components["schemas"]["PathEdge"][];
                    };
                };
            };
        };
        responses: {
            /** @description Created plan */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoutePlan"];
                };
            };
        };
    };
    getRoutePlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Route plan */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoutePlan"];
                };
            };
        };
    };
    listAudit: {
        parameters: {
            query?: {
                since?: string;
                limit?: number;
            };
            header: {
                "x-tenant-id": components["parameters"]["TenantHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
}
